import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -notrelocatable Ubuntu.Test 0.1 tests/utils/modules'

Module {
    dependencies: [
        "QtFeedback 5.0",
        "QtGraphicalEffects 1.0",
        "QtQml 2.0",
        "QtQuick 2.4",
        "QtQuick.Layouts 1.1",
        "QtQuick.Window 2.2",
        "QtTest 1.1",
        "Ubuntu.Components 1.3",
        "Ubuntu.Components.ListItems 1.3",
        "Ubuntu.Components.Popups 1.3",
        "Ubuntu.Components.Styles 1.3",
        "Ubuntu.Components.Themes 1.3",
        "Ubuntu.Components.Themes.Ambiance 1.3",
        "Ubuntu.PerformanceMetrics 1.0",
        "com.canonical.Oxide 1.9"
    ]
    Component {
        name: "TestUtil"
        prototype: "QObject"
        exports: ["Ubuntu.Test/Util 0.1"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "isInstanceOf"
            type: "bool"
            Parameter { type: "QObject"; isPointer: true }
            Parameter { type: "string" }
        }
        Method { name: "touchEvent"; type: "TouchEventSequenceWrapper*" }
    }
    Component {
        name: "TouchEventSequenceWrapper"
        prototype: "QObject"
        exports: ["Ubuntu.Test/TouchEventSequence 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "commit"
            Parameter { name: "processEvents"; type: "bool" }
        }
        Method { name: "commit" }
        Method {
            name: "move"
            Parameter { name: "touchId"; type: "int" }
            Parameter { name: "x"; type: "int" }
            Parameter { name: "y"; type: "int" }
        }
        Method {
            name: "press"
            Parameter { name: "touchId"; type: "int" }
            Parameter { name: "x"; type: "int" }
            Parameter { name: "y"; type: "int" }
        }
        Method {
            name: "release"
            Parameter { name: "touchId"; type: "int" }
            Parameter { name: "x"; type: "int" }
            Parameter { name: "y"; type: "int" }
        }
        Method {
            name: "stationary"
            Parameter { name: "touchId"; type: "int" }
        }
    }
    Component {
        prototype: "Palette_QMLTYPE_2"
        name: "Palette"
        exports: ["Palette -1.-1"]
        exportMetaObjectRevisions: [-1]
        isComposite: true
    }
    Component {
        prototype: "QObject"
        name: "PaletteValues"
        exports: ["PaletteValues -1.-1"]
        exportMetaObjectRevisions: [-1]
        isComposite: true
        Property { name: "background"; type: "QColor" }
        Property { name: "backgroundText"; type: "QColor" }
        Property { name: "base"; type: "QColor" }
        Property { name: "baseText"; type: "QColor" }
        Property { name: "foreground"; type: "QColor" }
        Property { name: "foregroundText"; type: "QColor" }
        Property { name: "overlay"; type: "QColor" }
        Property { name: "overlayText"; type: "QColor" }
        Property { name: "field"; type: "QColor" }
        Property { name: "fieldText"; type: "QColor" }
        Property { name: "selection"; type: "QColor" }
    }
    Component {
        prototype: "QObject"
        name: "UbuntuColors"
        exports: ["UbuntuColors -1.-1"]
        exportMetaObjectRevisions: [-1]
        isComposite: true
        isCreatable: false
        isSingleton: true
        Property { name: "orange"; type: "QColor"; isReadonly: true }
        Property { name: "lightAubergine"; type: "QColor"; isReadonly: true }
        Property { name: "midAubergine"; type: "QColor"; isReadonly: true }
        Property { name: "darkAubergine"; type: "QColor"; isReadonly: true }
        Property { name: "warmGrey"; type: "QColor"; isReadonly: true }
        Property { name: "coolGrey"; type: "QColor"; isReadonly: true }
        Property { name: "orangeGradient"; type: "QQuickGradient"; isPointer: true }
        Property { name: "greyGradient"; type: "QQuickGradient"; isPointer: true }
        Property { name: "lightGrey"; type: "QColor"; isReadonly: true }
        Property { name: "darkGrey"; type: "QColor"; isReadonly: true }
        Property { name: "red"; type: "QColor"; isReadonly: true }
        Property { name: "green"; type: "QColor"; isReadonly: true }
        Property { name: "blue"; type: "QColor"; isReadonly: true }
        Property { name: "purple"; type: "QColor"; isReadonly: true }
    }
}
